<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on whatnowbrowncow</title>
        <link>https://whatnowbrowncow.github.io/posts/</link>
        <description>Recent content in Posts on whatnowbrowncow</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 08 Feb 2022 11:00:54 +0000</lastBuildDate>
        <atom:link href="https://whatnowbrowncow.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Snowflakes snowflakes everywhere, network automation in a brownfield world!</title>
            <link>https://whatnowbrowncow.github.io/posts/2022/02/snowflakes-snowflakes-everywhere-network-automation-in-a-brownfield-world/</link>
            <pubDate>Tue, 08 Feb 2022 11:00:54 +0000</pubDate>
            
            <guid>https://whatnowbrowncow.github.io/posts/2022/02/snowflakes-snowflakes-everywhere-network-automation-in-a-brownfield-world/</guid>
            <description>I want to start this blog post by clearing something up; when you decide to start exploring network automation you&amp;rsquo;re essentially starting at the bottom of the mountain, therefore you&amp;rsquo;d be ill advised to try and plot a new path and get to the top on your own. You&amp;rsquo;re much better off taking the path well troden, following the examples of others and ultimately re-using people&amp;rsquo;s code and ideas.
Now that might sound like plagerism but it&amp;rsquo;s really not, as you get more involved in the coding community (community being the key word here) you come to realise that a lot of code is made up of little bits of other people&amp;rsquo;s code.</description>
            <content type="html"><![CDATA[<p>I want to start this blog post by clearing something up; when you decide to start exploring network automation you&rsquo;re essentially starting at the bottom of the mountain, therefore you&rsquo;d be ill advised to try and plot a new path and get to the top on your own.
You&rsquo;re much better off taking the path well troden, following the examples of others and ultimately re-using people&rsquo;s code and ideas.<br>
Now that might sound like plagerism but it&rsquo;s really not, as you get more involved in the coding community (community being the key word here) you come to realise that a lot of code is made up of little bits of other people&rsquo;s code. If you need to solve a problem while coding, chances are someone else has already faced the same challenge, come up with, and shared the answer.<br>
Whether it be a code snippet, a Python module or a fully functioning script, these solutions have been shared with the sole intention of helping others and attempting to find an alternative is frankly just re-inventing the wheel.</p>
<p>I guess the point I&rsquo;m making here is that Google is your friend, sites such as StackOverflow and the Cisco Devnet community forums are brimming with information, help and solutions so use them as much as you can and eventually give something back by contributing some answers (or a humble blog) yourself.</p>
<h3 id="now-heres-the-but">Now here&rsquo;s the but&hellip;&hellip;</h3>
<p>Having said all of that there is a bit of an issue out there that forms the main topic of this post. Over the last couple of years I&rsquo;ve spent a lot of time online researching, looking for answers to problems and generally looking into how other people are achieving their automation goals. There are quite a few how to articles popping up but there seems to be a recuring theme, as a general rule the automation is done in an ideal world!</p>
<p>Now that&rsquo;s a pretty big generalisation and I should point out that there is a lot of excellent content out there that really gets into the techincal nuts and bolts of how network automation works. What I mean is that these guides are focussed on delivering the how from a tooling perspective and in order to demonstrate that tooling (and crucially for the reader to understand it), the scenarios used are often structured in a very uniform and consistent way.</p>
<p>Unfortunately for us, most networks aren&rsquo;t very uniform and they certainly aren&rsquo;t consistent. I&rsquo;m sure that every team of network engineers starts off with the best of intentions but over time inconsistencies or configuration drift will creep into your network until no two devices are the same, there are no guarantees that every device conforms to the assumed build standards and some devices will just become complete anomalies for one reason or another.
This scenario is the inevitable result of manual changes being carried out by a changing group of human network engineers over many years, every network device becomes a &lsquo;snowflake&rsquo; and this is one of the biggest challenges you&rsquo;ll face when introducing automation to a long established network.</p>
<h4 id="lets-look-at-a-simple-example">Let&rsquo;s look at a simple example&hellip;.</h4>
<p>You have a network that consists of 50 routers and a request has been raised to configure a new interface on each one, details are as follows:</p>
<p><strong>Interface:</strong> GigabitEthernet 0/1/0<br>
<strong>Description:</strong> New interface for 2nd ISP link<br>
<strong>Status:</strong> Shutdown<br>
<strong>IP Address:</strong> 10.1.x.1/24<br>
<strong>VRF:</strong> ISP2-VRF</p>
<p>This is a perfect example of where you could use automation to carry out a repetitive task to consistently configure many interfaces across many devices. One method you could use is a simple Jinja2 template to generate each individual configuration which can then be pushed out using Ansible</p>
<pre><code class="language-jinja2" data-lang="jinja2">{% for host_ip in range(1,51) %}
configure terminal
interface GigabitEthernet 0/1/0
ip vrf forwarding ISP2-VRF
description New interface for 2nd ISP link
shutdown
ip address 10.1.{{host_ip}}.1 255.255.255.0
{% endfor %}
</code></pre><p>So far so good&hellip;&hellip;</p>
<p>Now let&rsquo;s take a look at the effect of running that automation on the first five routers on your network</p>
<table>
<thead>
<tr>
<th>Router</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Success!</td>
</tr>
<tr>
<td>2</td>
<td>Failed - VRF does not exist (configured on device as &ldquo;ISP2_VRF&rdquo;)</td>
</tr>
<tr>
<td>3</td>
<td>Failed - Interface was already in use for an ad-hoc connection to AWS, the config change placed this interface in a shutdown state and caused an outage</td>
</tr>
<tr>
<td>4</td>
<td>Success!</td>
</tr>
<tr>
<td>5</td>
<td>Failed - GigabitEthernet 0/1/0 does not exist on this older device</td>
</tr>
</tbody>
</table>
<p>Now this is a hypothetical scenario with a lot of bad luck included but you get the picture, the big lesson here (and the real point of this blog) is&hellip;</p>
<p><strong>Before you start to automate configuration changes in a brownfield network, you must first understand the current state of your network devices!</strong></p>
<p>OK so now we&rsquo;ve got that out of the way how on earth I hear you ask, do we go about understanding the current state of the network?</p>
<p>Well the simple answer is exactly how you would if you were doing it manually; by issuing show commands on your devices and processing the output. Where we differ from the manual process is in the fact that we can make a computer do most of the heavy lifting when it comes to gathering, assessing and reporting on that data. The caveat to all of this of course is that the data that we feed into the computer needs to be in a machine readable format, something which is not natively the case with a lot of network devices.</p>
<p>If we issue a simple <em>show ip interfaces brief</em> on a Cisco IOS router for example the output is very readable to a human but for a computer, not so much:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Router# show ip interface brief
Interface             IP-Address      OK?    Method Status     	Protocol
GigabitEthernet0/1    unassigned      YES    unset  up         	up
GigabitEthernet0/2    192.168.190.235 YES    unset  up         	up
GigabitEthernet0/3    unassigned      YES    unset  up         	up
GigabitEthernet0/4    192.168.191.2   YES    unset  down       	down
</code></pre></div><p>Now to a computer the above is just a collection of text, it means absolutely nothing. To give it meaning we need to convert this output into a machine readable format, and for that we need a parser.</p>
<p>Parsers are simply a way of passing over data, in our case the plain text above, looking for certain paterns or keywords in the text and converting it into a format that a computer can understand. One tool commonly used for this purpose is regular expresion or REGEX for short. REGEX can be described as a patern used to match character combinations within a sting or body of text, paterns can be relatively simple but can also combine many special symbols order to perform complex matches on large data sets.</p>
<p>Using a parser specifically written to extract values related to our show command we can convert the above output into a machine readable format, in this case JSON:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;interface&#34;</span>: {
        <span style="color:#f92672">&#34;GigabitEthernet0/1&#34;</span>: {
            <span style="color:#f92672">&#34;ip_address&#34;</span>: <span style="color:#e6db74">&#34;unassigned&#34;</span>,
            <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;up&#34;</span>,
            <span style="color:#f92672">&#34;protocol_status&#34;</span>: <span style="color:#e6db74">&#34;up&#34;</span>,
        },
        <span style="color:#f92672">&#34;GigabitEthernet0/2&#34;</span>: {
            <span style="color:#f92672">&#34;ip_address&#34;</span>: <span style="color:#e6db74">&#34;192.168.190.235&#34;</span>,
            <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;up&#34;</span>,
            <span style="color:#f92672">&#34;protocol_status&#34;</span>: <span style="color:#e6db74">&#34;up&#34;</span>,
        },
        <span style="color:#f92672">&#34;GigabitEthernet0/3&#34;</span>: {
            <span style="color:#f92672">&#34;ip_address&#34;</span>: <span style="color:#e6db74">&#34;unassigned&#34;</span>,
            <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;up&#34;</span>,
            <span style="color:#f92672">&#34;protocol_status&#34;</span>: <span style="color:#e6db74">&#34;up&#34;</span>,
        },
        <span style="color:#f92672">&#34;GigabitEthernet0/4&#34;</span>: {
            <span style="color:#f92672">&#34;ip_address&#34;</span>: <span style="color:#e6db74">&#34;192.168.191.2&#34;</span>,
            <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;down&#34;</span>,
            <span style="color:#f92672">&#34;protocol_status&#34;</span>: <span style="color:#e6db74">&#34;down&#34;</span>,
        }
}
</code></pre></div><p>As you can see we now have the same device information from a manual show command but crucially, in a machine readable format.</p>
<h3 id="so-the-big-question-is-how-is-that-useful-to-me">So the big question is&hellip;. how is that useful to me?</h3>
<p>Well the answer is that you can now make decisions during your automation on a far more granular scale, now that you know the state of your device or devices, you can take different actions on an item by item basis (items could be anything such as a group of devices but in this example would be a group of interfaces)</p>
<p>If we circle back to our original example of configuring a new interface on a number of devices, let&rsquo;s assume that we&rsquo;ve used a parser to understand the state of the interface on each device before we do any configuration.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;Devices&#34;</span>: {
      <span style="color:#f92672">&#34;router1&#34;</span>:{
          <span style="color:#f92672">&#34;GigabitEthernet_0/1/0_present&#34;</span>: <span style="color:#e6db74">&#34;True&#34;</span>,
          <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;down&#34;</span>,
          <span style="color:#f92672">&#34;ispvrf_present&#34;</span> : <span style="color:#e6db74">&#34;True&#34;</span>},
      <span style="color:#f92672">&#34;router2&#34;</span>:{
          <span style="color:#f92672">&#34;GigabitEthernet_0/1/0_present&#34;</span>: <span style="color:#e6db74">&#34;True&#34;</span>,
          <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;down&#34;</span>,
          <span style="color:#f92672">&#34;ispvrf_present&#34;</span> : <span style="color:#e6db74">&#34;False&#34;</span>},
      <span style="color:#f92672">&#34;router3&#34;</span>:{
          <span style="color:#f92672">&#34;GigabitEthernet_0/1/0_present&#34;</span>: <span style="color:#e6db74">&#34;True&#34;</span>,
          <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;up&#34;</span>,
          <span style="color:#f92672">&#34;ispvrf_present&#34;</span> : <span style="color:#e6db74">&#34;True&#34;</span>},
      <span style="color:#f92672">&#34;router4&#34;</span>:{
          <span style="color:#f92672">&#34;GigabitEthernet_0/1/0_present&#34;</span>: <span style="color:#e6db74">&#34;True&#34;</span>,
          <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;down&#34;</span>,
          <span style="color:#f92672">&#34;ispvrf_present&#34;</span> : <span style="color:#e6db74">&#34;True&#34;</span>},
      <span style="color:#f92672">&#34;router5&#34;</span>:{
          <span style="color:#f92672">&#34;GigabitEthernet_0/1/0_present&#34;</span>: <span style="color:#e6db74">&#34;False&#34;</span>,
          <span style="color:#f92672">&#34;interface_status&#34;</span>: <span style="color:#e6db74">&#34;N/A&#34;</span>,
          <span style="color:#f92672">&#34;ispvrf_present&#34;</span> : <span style="color:#e6db74">&#34;True&#34;</span>}
      }
}
</code></pre></div><p>Armed with this information we can add some <em>if</em> logic to our <strong>jinja2</strong> template in order to take different actions depending on the results of the tests:</p>
<pre><code class="language-jinja2" data-lang="jinja2">{% for device in devices %}
{%   if device.GigabitEthernet_0/1/0_present == True %}  &lt;-- Test 1
{%     if device.ispvrf_present == True %}  &lt;-- Test 2
{%       if device.interface_status == down %}  &lt;-- Test 3
configure terminal
interface GigabitEthernet 0/1/0
ip vrf forwarding ISP2-VRF
description New interface for 2nd ISP link
shutdown
ip address 10.1.1.{{loop.index}} 255.255.255.0
{%       endif %}
{%     endif %}
{%   endif %}
{% endfor %}
</code></pre><p>Hopefully you can follow the logic in the above template, essentially it&rsquo;s carrying out a series of tests before finally generating the device configuration if all tests pass. Using the devices from our previous example the results table would now be as folows:</p>
<table>
<thead>
<tr>
<th>Router</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Success!</td>
</tr>
<tr>
<td>2</td>
<td>Skipped - Test 2 failed - VRF does not exist</td>
</tr>
<tr>
<td>3</td>
<td>Skipped - Test 3 failed - Interface was not in a shutdown state</td>
</tr>
<tr>
<td>4</td>
<td>Success!</td>
</tr>
<tr>
<td>5</td>
<td>Skipped - Test 1 failed - GigabitEthernet 0/1/0 does not exist on this older device</td>
</tr>
</tbody>
</table>
<p>Now the above example is very simplistic but hopefully you get the point that by using the power of automation to first understand the existing state of your network, you can avoid some of the common pitfalls associated with making the assumption that all devices are configured the same.</p>
<p>Ultimately this is the difference between what I would describe as &lsquo;fire and forget&rsquo; and inteligent automation, there is of course many use cases for both but I would always advise caution when pushing out change en masse without fully understanding existing state.</p>
<p>Look out for another blog coming soon where I will explore the world of PyATS and specifically the huge library of parsers available to help you really understand the state of your network.</p>
]]></content>
        </item>
        
        <item>
            <title>The network developer&#39;s toolkit</title>
            <link>https://whatnowbrowncow.github.io/posts/2021/03/the-network-developers-toolkit/</link>
            <pubDate>Fri, 05 Mar 2021 19:20:05 +0000</pubDate>
            
            <guid>https://whatnowbrowncow.github.io/posts/2021/03/the-network-developers-toolkit/</guid>
            <description>Following on from my first blog post about the changing world of network engineering I thought it would be a good idea to talk about some of the tools and technologies that will form your &amp;lsquo;go to&amp;rsquo; toolkit for network automation.
Just to be clear, this is not a comprehensive list of everything you need to know, nor is it an endorsement of any particular technology over another, this is simply a collection of tools that I use regularly as part of my automation development.</description>
            <content type="html"><![CDATA[<p>Following on from my first blog post about the changing world of network engineering I thought it would be a good idea to talk about some of the tools and technologies that will form your &lsquo;go to&rsquo; toolkit for network automation.</p>
<p>Just to be clear, this is not a comprehensive list of everything you need to know, nor is it an endorsement of any particular technology over another, this is simply a collection of tools that I use regularly as part of my automation development. I&rsquo;m going to cover what each one is, how it works and what it&rsquo;s used for. The idea being that when used together, you should have all the tools you need to produce your first piece of network automation.</p>
<hr>
<h3 id="linux---the-operating-system">Linux - the operating system</h3>
<p>First of all you&rsquo;re going to need something to run all of your tools, I make the assumption that most people reading this will be running a windows machine and whilst some of your toolkit will run quite happily on Windows natively, that&rsquo;s not always the case.</p>
<p>Linux is an open source operating system used to run all of the other tools mentioned here, Linux users usually obtain their operating system by downloading a Linux distribution (distro) such as Ubuntu or CentOS. To begin with you don&rsquo;t need to have an in depth understanding of Linux but you will need to master the basics such as navigating/manipulating the directory structure and installing applications.</p>
<p>There are a number of ways to run a Linux development environment from your windows machine such as:</p>
<ul>
<li>Docker containers</li>
<li>Windows Subsystem for Linux (WSL)</li>
<li>A virtual machine via VMWare player or VirtualBox</li>
</ul>
<p><strong>Further reading:</strong></p>
<p><a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview">The Linux command line for beginners</a></p>
<p><a href="https://www.hpe.com/us/en/insights/articles/3-good-ways-to-run-linux-on-windows-2007.html">3 good ways to run Linux on Windows</a></p>
<hr>
<h3 id="ansible---the-orchestration-platform">Ansible - the orchestration platform</h3>
<p>Ansible is an open-source orchestration and configuration management platform that enables infrastructure as code.</p>
<p>Wait, hang on a minute, what does that mean in plain english?</p>
<p>Yeah ok fair point, let&rsquo;s start again&hellip;</p>
<p>Ansible is open-source software meaning that it is free to use, it acts as an orchestration platform to effectively bring together various components in order to manage, interrogate and configure devices or nodes (in our case network devices) within your infrastructure.</p>
<p>One of the things that makes Ansible so suitable for managing network devices is that it is agentless, meaning that no agent installation is required on the devices being targeted. All that is required is SSH connectivity, equally appealing is that fact that you can run Ansible from your local machine with no requirement for a dedicated server.</p>
<p>There are many components that make up an Ansible automation environment but the main ones you&rsquo;ll need to know about to get started are..</p>
<p><strong>Inventory</strong> - A centralised record that holds information on all of the devices that you want to manage with Ansible, you can group devices together based on common attributes (for example by device type or geographic location) and define variables for individual devices (host_vars) or for the groups that they belong to (group_vars).</p>
<p><strong>Modules</strong> - snippets of code that carry out a specific task or function, parameters are used to shape how that code is executed on your devices. As well as generic Ansible modules there are hundreds of vendor specific ones available to use.</p>
<p><strong>Tasks</strong> - Actions that can be executed against devices (or groups of) within your inventory, often by calling a module. For example a task to execute a <em>show</em> command on a Cisco device using the <em>ios_command</em> module.</p>
<p><strong>Roles</strong> - A collection of tasks grouped together to perform a function. For example a <em>local user</em> role could be a collection of individual tasks to obtain a list of local user accounts, change the password for a certain account and save the configuration.</p>
<p><strong>Playbooks</strong> - This is where you bring everything together. Playbooks are used to map inventory hosts or groups to a set of roles, the roles are then executed against those devices.</p>
<p>There&rsquo;s obviously a bit more to it than that but if you check out my <a href="https://whatnowbrowncow.github.io/links/">useful links</a> section you&rsquo;ll find a link to an excellent hands on guide written by my colleague Chris Hannan that covers getting started with Ansible and Cisco Devnet.</p>
<hr>
<h3 id="yaml---the-data-format-of-choice">YAML - the data format of choice</h3>
<p>Ansible uses YAML extensively to construct playbooks, define variables, build roles and many other things so it&rsquo;s something you&rsquo;re going to have to get familiar with. The official definition of YAML is <em>a human-readable data-serialization language</em> which basically means that it&rsquo;s one of many ways to represent data in a machine readable format. The major benefit of YAML is that it&rsquo;s very easy for humans to read when compared to something like xml.</p>
<p>If we take a basic example of a network interface, I want to represent some basic information such as name, description, IP address and status.
Let&rsquo;s compare YAML to XML</p>
<hr>
<h5 id="yaml">YAML</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">Interfaces</span>:
  - <span style="color:#f92672">Interface_name</span>: <span style="color:#ae81ff">GigabiEthernet1/0/1</span>
    <span style="color:#f92672">Description</span>: <span style="color:#ae81ff">WAN link</span>
    <span style="color:#f92672">IPv4</span>:
      - <span style="color:#f92672">IP_address</span>: <span style="color:#ae81ff">10.1.1.1</span>
        <span style="color:#f92672">Mask</span>: <span style="color:#ae81ff">255.255.255.0</span>
    <span style="color:#f92672">Status</span>: <span style="color:#ae81ff">up</span>
    
  - <span style="color:#f92672">Interface_name</span>: <span style="color:#ae81ff">Loopback0</span>
    <span style="color:#f92672">Description</span>: <span style="color:#ae81ff">Management</span>
    <span style="color:#f92672">IPv4</span>:
      - <span style="color:#f92672">IP_address</span>: <span style="color:#ae81ff">192.168.1.1</span>
        <span style="color:#f92672">Mask</span>: <span style="color:#ae81ff">255.255.255.224</span>
    <span style="color:#f92672">Status</span>: <span style="color:#ae81ff">up</span>
</code></pre></div><h5 id="html">HTML</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">  &lt;<span style="color:#f92672">Interfaces</span>&gt;
    &lt;<span style="color:#f92672">Interface_name</span>&gt;GigabiEthernet1/0/1&lt;/<span style="color:#f92672">Interface_name</span>&gt;
    &lt;<span style="color:#f92672">Description</span>&gt;WAN link&lt;/<span style="color:#f92672">Description</span>&gt;
    &lt;<span style="color:#f92672">IPv4</span>&gt;
      &lt;<span style="color:#f92672">IP_address</span>&gt;10.1.1.1&lt;/<span style="color:#f92672">IP_address</span>&gt;
      &lt;<span style="color:#f92672">Mask</span>&gt;255.255.255.0&lt;/<span style="color:#f92672">Mask</span>&gt;
    &lt;/<span style="color:#f92672">IPv4</span>&gt;
    &lt;<span style="color:#f92672">Status</span>&gt;up&lt;/<span style="color:#f92672">Status</span>&gt;
  &lt;/<span style="color:#f92672">Interfaces</span>&gt;
  &lt;<span style="color:#f92672">Interfaces</span>&gt;
    &lt;<span style="color:#f92672">Interface_name</span>&gt;Loopback0&lt;/<span style="color:#f92672">Interface_name</span>&gt;
    &lt;<span style="color:#f92672">Description</span>&gt;Management&lt;/<span style="color:#f92672">Description</span>&gt;
    &lt;<span style="color:#f92672">IPv4</span>&gt;
      &lt;<span style="color:#f92672">IP_address</span>&gt;192.168.1.1&lt;/<span style="color:#f92672">IP_address</span>&gt;
      &lt;<span style="color:#f92672">Mask</span>&gt;255.255.255.224&lt;/<span style="color:#f92672">Mask</span>&gt;
    &lt;/<span style="color:#f92672">IPv4</span>&gt;
    &lt;<span style="color:#f92672">Status</span>&gt;up&lt;/<span style="color:#f92672">Status</span>&gt;
  &lt;/<span style="color:#f92672">Interfaces</span>&gt;
</code></pre></div><p>As you can see whilst both examples are decipherable YAML is presented in a way that is more familiar to us as humans and therefore easier to read and digest quickly.
The basic YAML structure uses colons to separate key: value pairs (like a dictionary) and dashes to create “bullet” lists.</p>
<p>One important thing to note is that YAML uses strict whitespace indentation to denote this structure so any miss-aligned data within a file will result in errors.</p>
<hr>
<h3 id="jinja2---the-templating-language">Jinja2 - the templating language</h3>
<p>Once you&rsquo;ve gotten to grips with Ansible and YAML you will soon come to realise that automating configuration across your network estate isn&rsquo;t the only high value use case. What automation also gives you is the ability to pull information or data from a huge number of sources (i.e. your managed devices) into a central place. This data can come in many formats, structures and languages (e.g. lists, dictionaries, YAML or JSON).</p>
<p>What Jinja2 is really good at is taking this mass of raw data and collating it into a final document using a defined template, this could be something like a report, configuration file or data structure.</p>
<p>Let&rsquo;s take a look at another example&hellip;</p>
<p>Looking back at the YAML data from the previous example, let&rsquo;s say I wanted to produce a report that detailed the interface configuration for that device.
We could produce a simple Jinja2 template file that will do the job for us</p>
<pre><code class="language-jinja2" data-lang="jinja2">{% for interface in Interfaces %}
Interface name = {{ interface.interface_name }}
This interface has a description of {{ interface.description }}
It's IP configuration is {{ interface.IPv4.IP_address }} {{ interface.IPv4.Mask }}
The interface is {{ interface.status }}
{% endfor %}
</code></pre><p>This will result in the following output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Interface name = GigabiEthernet1/0/1  
This interface has a description of WAN link  
It&#39;s IP configuration is 10.1.1.1 255.255.255.0  
The interface is up  

Interface name = Loopback0  
This interface has a description of Management  
It&#39;s IP configuration is 192.168.1.1 255.255.255.224  
The interface is up  
</code></pre></div><p>As you can see the Jinja2 template loops through the list of interfaces and inserts the relevant values into the desired place in the output, the result being a nicely formatted document detailing our interface configuration.</p>
<p>Now this example processed just two interfaces on a single device, but imagine if you had a requirement to generate a report from data for several interfaces across hundreds of devices, that&rsquo;s where Jinja2 really starts to add value.</p>
<p>What&rsquo;s even better is that once you&rsquo;ve built the correct logic to access and process the data you can quickly change the template to achieve a different output completely, a csv report for example.</p>
<pre><code class="language-jinja2" data-lang="jinja2">Interface name,Description,IP Address,Subnet Mask,Status
{% for interface in Interfaces %}
{{ interface.interface_name }},{{ interface.description }},{{ interface.IPv4.IP_address }},{{ interface.IPv4.Mask }},{{ interface.status }}
{% endfor %}
</code></pre><p>This will result in the following output:</p>
<pre><code class="language-csv" data-lang="csv">Interface name,Description,IP Address,Subnet Mask,Status
GigabiEthernet1/0/1,WAN link,10.1.1.1,255.255.255.0,up  
Loopback0,Management,192.168.1.1,255.255.255.224,up  
</code></pre><p>Jinja2 is a very powerful templating language with the ability to do much, much more to process, manipulate and format large amounts of data but the above should give you an insight into how simple it is to get started.</p>
<hr>
<h3 id="git---version-control-and-so-much-more">Git - version control and so much more</h3>
<p>If you’re starting to develop automation code, especially if you’re collaborating with others then you’re going to need somewhere to store your work, somewhere that allows you to commit and track your incremental changes, somewhere that keeps a historic log of those changes and allows you to roll back to a happier time when you hadn’t got a bit carried away and messed it all up! You&rsquo;re also going to need somewhere that allows you to work on the same files as others in your team, merge everyone’s changes into one master document and handle any conflicts along the way.</p>
<p>What you’re going to need is Git.</p>
<p>Like all of the other tools mentioned in this post Git can do so much more than what I’ve just outlined, but even if you never use it for anything other than what I’ve already talked about, it’s still one of the most important tools in your toolkit.</p>
<p><strong>Further reading:</strong></p>
<p><a href="https://opensource.com/article/18/1/step-step-guide-git">Getting started with Git</a></p>
<hr>
<h3 id="python---the-coding-language">Python - the coding language</h3>
<p>Python is a general-purpose coding language which has many use cases such as:</p>
<ul>
<li>software development</li>
<li>data processing and mathematical computations</li>
<li>creating system scripts or instructions that tell a computer system to “do” something</li>
</ul>
<p>That last point should sound familiar as it describes the role of an Ansible module, which are written in Python. Jinja2 was also developed for Python so there are large similarities in syntax and logic used between Python scripts and Jinja2 templates.</p>
<p>I&rsquo;ve debated quite a bit about whether to include Python in this list, Python is a really useful tool to have at your disposal and as you get more into automation it will become integral to your day to day work. However if you&rsquo;re just starting out I think there&rsquo;s a fair argument that you don&rsquo;t necessarily need a deep understanding of Python, I&rsquo;d go as far as to call it a &lsquo;phase 2&rsquo; skill for once you&rsquo;ve mastered some of the basics.</p>
<p>That said there are a few basic concepts such as <strong>loops</strong> and <strong>conditionals</strong> that I would recommend that you get familiar with.</p>
<p><strong>Further reading:</strong></p>
<p><a href="https://www.learnpython.org">Learn the basics of Python</a></p>
<hr>
<h3 id="visual-studio-code---the-ide-that-brings-it-all-together">Visual Studio Code - the IDE that brings it all together</h3>
<p>VSCode is an Integrated Development Environment (IDE) and simply put its a piece of software that brings together all the elements you need to develop your code within a single window. Whereas traditionally you would have several windows open for exploring files, running code via a terminal and editing files, an IDE brings all this together within a single view. There are many IDEs available to use and what they tend to have in common is the ability to integrate with other elements of your development environment. VS code does this through extensions, there are literally thousands of them which offer functionally such as syntax highlighting, code debugging and Git integration.</p>
<hr>
<p>As I said at the beginning, this list is not comprehensive and there are alternative technologies to most of the tools I&rsquo;ve talked about. In fact I&rsquo;m pretty sure that as you read this there will be a debate raging somewhere about the benefits of XML over YAML, or Terraform over Ansible.</p>
<p>The point of this post is not to say which is better, the point is to give those of you starting out in network automation an idea of the tools that I&rsquo;ve found most useful. If you grow to love them too, great; if you decide that there&rsquo;s a better alternative for you, that&rsquo;s fine too.</p>
<p>I&rsquo;ll leave that for you to decide&hellip;</p>
]]></content>
        </item>
        
        <item>
            <title>The changing world of the network engineer....</title>
            <link>https://whatnowbrowncow.github.io/posts/2021/02/the-changing-world-of-the-network-engineer..../</link>
            <pubDate>Fri, 12 Feb 2021 21:21:04 +0000</pubDate>
            
            <guid>https://whatnowbrowncow.github.io/posts/2021/02/the-changing-world-of-the-network-engineer..../</guid>
            <description>There&amp;rsquo;s no getting away from it, the role of the modern network engineer is changing.
If you&amp;rsquo;ve been keeping even a cursory eye on recent developments within the networking community, you’ll have done well to avoid terms like NetDevOPs, Infrastructure as code, Network programability and Software Defined Networking.
Make no mistake, network automation is here and it’s here to stay.
Inevitably that realisation can be a little unsettling, it means change, potentially significant change, to an industry that’s remained comfortingly static for the past decade or three.</description>
            <content type="html"><![CDATA[<p>There&rsquo;s no getting away from it, the role of the modern network engineer is changing.</p>
<p>If you&rsquo;ve been keeping even a cursory eye on recent developments within the networking community, you’ll have done well to avoid terms like NetDevOPs, Infrastructure as code, Network programability and Software Defined Networking.</p>
<p>Make no mistake, network automation is here and it’s here to stay.</p>
<p>Inevitably that realisation can be a little unsettling, it means change, potentially significant change, to an industry that’s remained comfortingly static for the past decade or three.</p>
<p>It can also be confusing and lead to a lot of questions:</p>
<p>Is this the end of the cli and networking as we know it?<br>
<strong>No</strong></p>
<p>Is automation going to take my job?<br>
<strong>Nope</strong></p>
<p>Does this mean I need to become a coder?<br>
<strong>Not necessarily</strong></p>
<p>Do I need to buy a ‘clacky’ keyboard and cover my laptop with stickers?<br>
<strong>Only if you really want to</strong></p>
<p>Should I start thinking about building a skillset for Network Automation?<br>
<strong>Yes, absolutely!</strong></p>
<p>And the key thing to remember in all this?&hellip;.</p>
<h2 id="dont-panic"><strong>Don’t panic!</strong></h2>
<p>In a lot of cases (and this is one of them) change is good! This is not a doomsday scenario, this is not the end of traditional network engineering and it certainly isn’t the case that automation is here to take all our jobs (more of that in a bit).
Network automation is an opportunity to learn new skills, eliminate the monotony of repetitive tasks and also make your life easier.</p>
<p>I’ve been heavily involved in network automation for about 2 years now and I understand how at first, mastering a whole new set of skills can seem to be an insurmountable task. Make no mistake, the learning curve is steep and there’s a lot to take in but with the right mindset and a sensible approach, a whole new world of possibilities awaits.</p>
<p>I could just write another series of technical ‘how to’ blogs on the various network automation tools and techniques but to be honest, there is a lot of very good content out there that already does this.  What I’m aiming to do with this blog is to take a more expansive view, sure there’ll be some technical detail and explanations but I also want to focus on the lesser talked about elements like logistics, process and strategy.</p>
<p>Ultimately what I’d like to do is pass on some of the discoveries I’ve made; and lessons I’ve learned while trying to introduce automation to a large scale production environment, hopefully inspiring some of you to get started with network automation.</p>
<p>But before I get into too much detail I think it’s worth answering some common questions and addressing some common misconceptions about network automation…</p>
<p><strong><em>&ldquo;I can do my job just fine, why do I need Network Automation?&quot;</em></strong></p>
<p>I could write an entire blog answering this question alone (and maybe I will) but it really boils down to two things:</p>
<p><em>Speed</em> - Computers think and act faster than humans</p>
<p><em>Consistency</em> - Computers don&rsquo;t make mistakes</p>
<p><strong><em>&ldquo;I don’t know, all this automation has to be developed and tested, surely it’s quicker just to get it done?&quot;</em></strong></p>
<p>You know what? You might be right, by the time automation has been developed and tested, in some cases you probably would have the time to carry out the task manually;</p>
<p><strong>Once!</strong></p>
<p>The real value in network automation is the concept of write once, run many. Once you have successfully developed a piece of automation it can be run many times with the same consistent results and almost zero resource requirements. Whereas with manual deployments you will need to dedicate the same amount of resource each and every time you need to carry out that task with no guarantees of accuracy or consistency.</p>
<p><strong><em>&ldquo;Right, so I’m automating myself out of a job then.&quot;</em></strong></p>
<p><strong>Wrong!</strong></p>
<p>How many times in your career have you found yourself performing a mundane, time consuming, repetitive task on your network estate? Resetting local admin passwords, updating management ACLs, removing unused firewall rules. You log onto one device after another, making your changes, then you double check a couple because you’ve lost your place on the list, you might have made a mistake here or there. Finally you’ve got them all done only for the job to roll around again a few weeks later, surely there has to be a better way?
Network Automation isn&rsquo;t about replacing human engineers, it&rsquo;s about taking care of those repetitive, monotonous everyday tasks. Computers don’t get bored, they don’t get tired or distracted, what they do is perform tasks predictably with speed and consistency. Embracing the tools available to automate the everyday will free you up to get involved in the more interesting stuff.</p>
<p><strong><em>&ldquo;OK fine, network automation definitely sounds appealing, but there’s so much to learn and I’m not a coder&rdquo;</em></strong></p>
<p><strong>Neither am I&hellip;</strong></p>
<p>Two years ago I was in the same position, I’d never used Linux, I’d never heard of Jinja2 and I thought Git was an insult!
The point is that you don’t need a history in coding, software development or automation in order to get started. There are a number of orchestration tools out there (Ansible being a prime example) that provide a layer of abstraction between the user and the underlying code greatly reducing the barrier to entry. There’s plenty of opportunity to understand and execute complex code and tooling but you’ll be surprised just how easy it is to get a simple piece automation up and running. It’s all about starting small and layering up your skill set over time.</p>
<p><strong><em>&ldquo;Ok you’ve convinced me, where do I start?&quot;</em></strong></p>
<p>The best advice I can give is to just get involved and start automating, it’s a bit of a cliche but you will learn far more by getting stuck in and trying things than you ever will just reading a book. There are some excellent resources out there that cover everything you need to know to get started, most notably the content over on <a href="https://developer.cisco.com">Cisco Devnet</a> and their excellent <a href="https://developer.cisco.com/site/sandbox/">sandbox labs</a>, all available free at the time of writing.
You can checkout my <a href="https://whatnowbrowncow.github.io/links/">useful links</a> section for community content that I think is worth a look and I’ll also be adding more content to the blog in the coming weeks; with a more in depth look at some of the key areas of considertation when starting your network automation journey.</p>
<p>But for now&hellip;&hellip;thanks for reading!</p>
]]></content>
        </item>
        
    </channel>
</rss>
